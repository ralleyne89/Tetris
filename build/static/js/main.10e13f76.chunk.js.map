{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","components/styles/StyledStage.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","hooks/useStage.js","hooks/useGameStatus.js","components/Tetris.js","hooks/usePlayer.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","_ref","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","_templateObject","bgImage","StyledTetris","_templateObject2","StyledStage","StyledStage_templateObject","props","height","width","StyledCell","StyledCell_templateObject","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","React","memo","react_default","a","createElement","console","log","Stage","map","row","cell","components_Cell","key","StyledDisplay","StyledDisplay_templateObject","gameOver","Display","text","StyledStartButton","StyledStartButton_templateObject","StartButton","callback","onClick","useStage","resetPlayer","_useState","useState","_useState2","Object","slicedToArray","setStage","_useState3","_useState4","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","concat","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","_usePlayer","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","objectSpread","clonedPlayer","JSON","parse","stringify","offset","usePlayer","_usePlayer2","updatePlayerPos","playerRotate","_useStage","_useStage2","_useGameStatus","score","setScore","rows","setRows","_useState5","_useState6","level","setLevel","linePoints","calcScore","useGameStatus","_useGameStatus2","movePlayer","drop","move","_ref2","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","components_Stage","components_Display","components_StartButton","App","className","components_Tetris","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.10e13f76.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, 'clear']),\n  );\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that we're on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          // 2. Check that our move is inside the game areas height (y)\n          // We shouldn't go through the bottom of the play area\n          !stage[y + player.pos.y + moveY] ||\n          // 3. Check that our move is inside the game areas width (x)\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          // 4. Check that the cell wer'e moving to isn't set to clear\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            'clear'\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n};\n","import styled from 'styled-components'\n\nimport bgImage from '../../img/bg.png'\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    heigth: 100vh;\n    background: url(${bgImage});\n    background-size: cover;\n    overflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`","import styled from 'styled-components'\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw/${props => props.width})\n    );\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap: 1px;\n    border: 2px solid #333;\n    width: 100%;\n    max-width: 25vw;\n    background: #111\n`","import styled from 'styled-components'\n\nexport const StyledCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n    border-bottom-color: rgba(${props => props.color},0.1);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.3);\n`","export const TETROMINOS = {\n  0: { shape: [[0]], color: '0, 0, 0' },\n  I: {\n       shape: [\n                [0, 'I', 0, 0],\n                [0, 'I', 0, 0],\n                [0, 'I', 0, 0],\n                [0, 'I', 0, 0]\n              ],\n       color: '80, 227, 230',       \n  },\n  J: {\n    shape: [\n             [0, 'J', 0],\n             [0, 'J', 0],\n             ['J', 'J', 0]\n           ],\n    color: '36, 95, 223',       \n  },\n  L: {\n    shape: [\n             [0, 'L', 0],\n             [0, 'L', 0],\n             [0, 'L', 'L']\n           ],\n    color: '223, 173, 36',       \n  },\n  O: {\n    shape: [\n             ['O', 'O'],\n             ['O', 'O'],\n           ],\n    color: '223, 217, 36',       \n  },\n  S: {\n    shape: [\n             [0, 'S', 'S'],\n             ['S', 'S', 0],\n             [0, 0, 0]\n           ],\n    color: '48, 211, 56',       \n  },\n  T: {\n    shape: [\n             [0, 0, 0],\n             ['T', 'T', 'T'],\n             [0, 'T', 0]\n           ],\n    color: '132, 61, 198',       \n  },\n  Z: {\n    shape: [\n             ['Z', 'Z', 0],\n             [0, 'Z', 'Z'],\n             [0, 0, 0]\n           ],\n    color: '227, 78, 78',       \n  },\n}\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randTetromino =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randTetromino];\n}","import React from 'react';\nimport {StyledCell} from './styles/StyledCell';\nimport {TETROMINOS} from '../tetrominos';\n\nconst Cell = ({type}) => (\n<StyledCell type={type} color={TETROMINOS[type].color}>{console.log('rerender')}</StyledCell>\n);\n\nexport default React.memo(Cell);\n","import React from 'react';\nimport {StyledStage} from './styles/StyledStage'\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components'\n\nexport const StyledDisplay = styled.div`\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red' : '#999')};\n    background: #000;\n    font-family: Pixel, Arial, Helevetica, sans-seriff;\n    font-size: 0.8rem;\n`;","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay'\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n)\n\nexport default Display;","import styled from 'styled-components'\n\nexport const StyledStartButton = styled.div`\n    box-sizing: border-box;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    border: none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n    outline: none;\n    cursor: pointer;\n`","import React from 'react';\nimport {StyledStartButton} from './styles/StyledStartButton'\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n)\n\nexport default StartButton;","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0)\n\n\n  useEffect(() => {\n    setRowsCleared(0)\n\n    const sweepRows = newStage => \n      newStage.reduce((ack, row) => {\n        if(row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1)\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']))\n          return ack\n        }\n        ack.push(row)\n        return ack\n      },[])\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n\n      // Then check if we collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage)\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage, rowsCleared];\n};","import { useState, useEffect, useCallback} from 'react'\n\nexport const useGameStatus = rowsCleared => {  \n    const [score, setScore] = useState(0)\n    const [rows, setRows] = useState(0)\n    const [level, setLevel] = useState(0)\n\n    const linePoints = [40, 100, 300, 1200]\n\n    const calcScore = useCallback(() => {\n        // DISPLAY SCORE\n        if(rowsCleared > 0) {\n            // SCORE CALCULATION\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1))\n            setRows(prev => prev + rowsCleared)\n        }\n    }, [level, linePoints, rowsCleared])\n\n    useEffect(() => {\n        calcScore()\n    },[calcScore, rowsCleared, score])\n\n    return [score, setScore, rows, setRows, level, setLevel]\n\n}","import React, {useState} from 'react';\nimport {createStage, checkCollision} from '../gameHelpers';\n\n// Styled components\nimport {StyledTetrisWrapper, StyledTetris} from './styles/StyledTetris';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\n// Custom Hooks\nimport {usePlayer} from '../hooks/usePlayer';\nimport {useStage} from '../hooks/useStage';\nimport {useInterval} from '../hooks/useInterval';\nimport {useGameStatus} from '../hooks/useGameStatus';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n  console.log('re-render');\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {x: dir, y: 0})) {\n      updatePlayerPos({x: dir, y: 0});\n    }\n  };\n\n  const startGame = () => {\n    // RESET\n    setStage(createStage());\n    setDropTime(800);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0)\n    setRows(0)\n    setLevel(0)\n  };\n\n  const drop = () => {\n    // INCREASE LEVEL AFTER 10 ROWS\n    if(rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1)\n      // INCREASE SPEED ON NEW LEVEL\n      setDropTime(800/ (level + 1) + 200)\n    }\n\n    if (!checkCollision(player, stage, {x: 0, y: 1})) {\n      updatePlayerPos({x: 0, y: 1, collided: false});\n    } else {\n      // Game Over\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({x: 0, y: 0, collided: true});\n    }\n  };\n\n  const keyUp = ({keyCode}) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        console.log('interval on');\n        setDropTime(800/ (level + 1) + 200);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    console.log('interval off');\n    setDropTime(null);\n    drop();\n  };\n\n  const move = ({keyCode}) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        // MOVE LEFT\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        // MOVE RIGHT\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        // MOVE DOWN\n        dropPlayer();\n        // ROTATE\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={e => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`Rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import {useState, useCallback} from 'react';\n\nimport {randomTetromino, TETROMINOS} from '../tetrominos';\nimport {STAGE_WIDTH, checkCollision} from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {x: 0, y: 0},\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (matrix, dir) => {\n    // TURN THE ROW TO COLUMN\n    const rotatedTetro = matrix.map((_, index) =>\n      matrix.map(col => col[index])\n    );\n    // REVERSE EACH ROW TO ROTATE THE MATRIX\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {x: 0, y: 0})) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({x, y, collided}) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {x: STAGE_WIDTH / 2 - 2, y: 0},\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}